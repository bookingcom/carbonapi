listen: ":8000"
# Expvars and performance metrics endpoint
listenInternal: ":7000"
maxProcs: 0
# graphite:
#     host: "localhost:2003"
#     interval: "60s"
#     prefix: "carbon.zipper"
#     # defines pattern of metric name. If present, {prefix} will be replaced with content of "prefix", {fqdn} with fqdn
#     pattern: "{prefix}.{fqdn}"

# Number of 100ms buckets to track request distribution in. Used to build
# 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
buckets: 10

timeouts:
    # Maximum total backend requesting timeout in ms.
    # ( How long we may spend making requests. )
    global: "100s"
    # Timeout, in ms, once the final backend has been contacted.
    # ( [Effectively] How long we'll wait for the slowest response. )
    afterStarted: "200s"
    # Timeout to connect to the server
    connect: "200ms"

# Number of concurrent requests to any given backend - default is no limit.
# If set, you likely want >= MaxIdleConnsPerHost
concurrencyLimit: 2048

# Configures how often keep alive packets will be sent out
keepAliveInterval: "30s"

# Control http.MaxIdleConnsPerHost. Large values can lead to more idle
# connections on the backend servers which may bump into limits; tune with care.
maxIdleConnsPerHost: 100

# If not zero, enabled cache for find requests
# This parameter controls when it will expire (in seconds)
# Default: 600 (10 minutes)
expireDelaySec: 120

# "http://host:port" array of instances of carbonserver stores
# This is the *ONLY* config element that MUST be specified.
backendsByCluster:
    - name: "sys"
      backends:
      - "http://go-carbon:8080"

#backends:
#    - "http://go-carbon:8080"

# Enable compatibility with graphite-web 0.9
# This will affect graphite-web 1.0+ with multiple cluster_servers
# Default: disabled
graphite09compat: true

# Configuration for the logger
# It's possible to specify multiple logger outputs with different loglevels and encodings
# Logger is logrotate-compatible, you can freely move or rename or delete files, it will create
# new one automatically
logger:
    - # Available Loggers:
      #   "" - global for all
      #   "main" - what's before start
      #   "find" - for find handler
      #   "info" - for info handler
      #   "loadbalancer" - for lb handler
      #   "probe" - for background probes
      #   "render" - for render handler
      #   "access" - access logs (requests, times, etc)
      # Please note that if you want to have all logs going to stdout and access logs going to file, you need to define 2 sections for access logger (file + stdout) + one section for logger ""
      logger: ""

      #   "/some/file"
      #   "stderr"
      #   "stdout"
      #   "" (=="stderr")
      #   "none"
      # default: "stdout"
      file: "stderr"

      # "debug", "info", "warn", "error", "fatal", "panic" are available
      # default: info
      level: "debug"

      # "json", "mixed" or "console", default: console
      encoding: "console"

      # Time format (for timestamps in the logs), default: iso8601
      # Available: "millis", "nanos", "epoch", "iso8601"
      encodingTime: "iso8601"

      # Format to encode durations, default: seconds.
      # Available: "seconds", "nanos", "string"
      encodingDuration: "seconds"
    - logger: ""
      file: "stdout"
      level: "info"
      encoding: "json"

monitoring:
    timeInQueueExpHistogram:
        start: 0.05
        bucketsNum: 25
        bucketSize: 2
    requestDurationExpHistogram:
        start: 0.05
        bucketsNum: 20
        bucketSize: 2
    requestDurationLinHistogram:
        start: 0.0
        bucketsNum: 40
        bucketSize: 0.05
