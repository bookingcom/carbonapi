# Need to be URL, http or https
# This url specifies the backend or a loadbalancer
#
# Is you are using carbonzipper you should set it to
# zipper's url
#
# If you are using plain go-carbon or graphite-clickhouse
# you should set it to URL of go-carbon's carbonserver module
# or graphite-clickhouse's http url.
# Listen address, should always include hostname or ip address and a port.
listen: ":8081"
listenInternal: ":7081"
# Max concurrent requests to CarbonZipper
concurrencyLimitPerServer: 1025
concurrencyLimit: 1024
cache:
   # Type of caching. Valid: "mem", "memcache", "null"
   type: "mem"
   # Cache limit in megabytes
   size_mb: 0
   # Default cache timeout value. Identical to DEFAULT_CACHE_DURATION in graphite-web.
   defaultTimeoutSec: 60
   # Only used by memcache type of cache. List of memcache servers.
   memcachedServers:
       - "127.0.0.1:11211"
# Amount of CPUs to use. 0 - unlimited
cpus: 0
#graphiteWeb: "graphiteWeb.example.yaml"
# Timezone, default - local
tz: ""
# If 'true', carbonapi will send requests as is, with globs and braces
# Otherwise for each request it will generate /metrics/find and then /render
# individual metrics.
# true --- faster, but will cause carbonzipper to consume much more RAM.
#
# For some backends (e.x. graphite-clickhouse) this *MUST* be set to true in order
# to get reasonable performance
#
# For go-carbon --- it depends on how you use it.
sendGlobsAsIs: true
# If sendGlobsAsIs is set and resulting response will be larger than maxBatchSize
# carbonapi will revert to old behavir. This allows you to use benifits of passing
# globs as is but keep memory usage in sane limits.
#
# For go-carbon you might want it to keep in some reasonable limits, 100 is good "safe" defaults
#
# For some backends (e.x. graphite-clickhouse) you might want to set it to some insanly high value, like 100000
maxBatchSize: 100

# alwaysSendGlobsAsIs: false

# functionsConfigs:
#     graphiteWeb: ./graphiteWeb.example.yaml

graphite:
    # Host:port where to send internal metrics
    # Empty = disabled
    host: ""
    interval: "60s"
    prefix: "carbon.api"
    # rules on how to construct metric name. For now only {prefix} and {fqdn} is supported.
    # {prefix} will be replaced with the content of {prefix}
    # {fqdn} will be repalced with fqdn
    pattern: "{prefix}.{fqdn}"
# Maximium idle connections to carbonzipper
idleConnections: 10
# Config to ensure we return version needed for providing integrated graphite docs in grafana
# without supporting tags
graphiteVersionForGrafana: 1.1.0
pidFile: ""
# See https://github.com/go-graphite/carbonzipper/blob/master/example.conf#L70-L108 for format explanation
upstreams:
    # Number of 100ms buckets to track request distribution in. Used to build
    # 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
    # Requests beyond the last bucket are logged as slow
    # (default of 10 implies "slow" is >1 second).
    buckets: 10
#    maxBatchSize: 200
#    concurrencyLimitPerServer: 100
    timeouts:
#        # Maximum backend request time for find requests.
#        find: "600s"
#        # Maximum backend request time for render requests. This is total one and doesn't take into account in-flight requests
#        render: "600s"
#        # Timeout to connect to the server
#        connect: "200ms"
        global: "600s"
#        afterStarted: "600s"
    # Configures how often keep alive packets will be sent out
    keepAliveInterval: "30s"
    # Control http.MaxIdleConnsPerHost. Large values can lead to more idle
    # connections on the backend servers which may bump into limits; tune with care.
    maxIdleConnsPerHost: 1030

    limits:
#    # Limit maximum responce size from upstream (in bytes)
#        maxSize: 1048576
#    # Limit maximum time duration for request (beetween from/until) (in DAYS !!)
#        maxDuration: 1825

    backends:
      - http://zipper:8000

    # Number of concurrent requests to any given backend - default is no limit.
    # If set, you likely want >= MaxIdleConnsPerHost
#    concurrencyLimit: 0

    # Enable compatibility with graphite-web 0.9
    # This will affect graphite-web 1.0+ with multiple cluster_servers
    # Default: disabled
    graphite09compat: false
# If not zero, enabled cache for find requests
# This parameter controls when it will expire (in seconds)
# Default: 600 (10 minutes)
expireDelaySec: 10
blockHeaderFile: "block_header_list.yaml"
blockHeaderUpdatePeriod: "30s"
headersToLog:
    - X-Panel-Id
    - X-Dashboard-Id
    - X-Real-Ip
    - X-Webauth-User
logger:
    - logger: ""
      file: "stderr"
      level: "debug"
      encoding: "json"
#      encodingTime: "iso8601"
#      encodingDuration: "seconds"
    - logger: ""
      file: "stdout"
      level: "info"
      encoding: "json"

monitoring:
    timeInQueueExpHistogram:
        start: 0.05
        bucketsNum: 25
        bucketSize: 2
    requestDurationExpHistogram:
        start: 0.05
        bucketsNum: 20
        bucketSize: 2
    requestDurationLinHistogram:
        start: 0.0
        bucketsNum: 40
        bucketSize: 0.05
